var http = require("http");
var log = require("log");
log.setLevel("INFO"); //levels are ERROR | WARN | INFO | DEBUG | OFF
log.debug(request.queryString);

function laMetric(serial, username, password, logger) {
    this.serial = serial;
    this.username = username;
    this.password = password;
    this.logger = typeof logger !== 'undefined' ? logger : log;
    this.frames = [];
    this.isCached = null;
    this.addFrame = function(text, icon){
        icon = typeof icon !== 'undefined' ? icon : "i10765";
        var index = this.frames.length;
        this.frames.push({"text": text, "icon": icon, "index": index});
    };
    this.renderApiError = function(e){
        msg = "Goflipr API returns error " + e;
        this.addFrame(msg);
        this.logger.error(msg);
        this.outputJSON();
    };
    this.parseAPI = function(){
        var api, msg, ts, timeout, res;
        if(this.serial){
            ts = Math.floor((new Date).getTime()/1000);
            if(storage.local.apiStatus && storage.local.apiStatus==200){
                timeout = 1800;
            } else {
                timeout = 300;
            }
            if(storage.local.apiStatus && storage.local.jsonTime && ts < (storage.local.jsonTime + timeout)){
                log.debug("Api from cache");
                this.isCached = true;
                if (storage.local.apiStatus == 200 && storage.local.jsonResults){
                    return storage.local.jsonResults;
            	} else {
                    this.renderApiError(storage.local.apiStatus);
                }
            } else {
                log.debug("new api request");
                this.isCached = false;
                auth_request = http.request({
                    "url": "https://apis.goflipr.com/OAuth2/token",
                    "method": "POST",
                    "params": {"password": this.password, "username": this.username, "grant_type": "password"}
                });
                if (auth_request.status != 200) {
                    this.renderApiError(auth_request.status);
                } else {
                	res = JSON.parse(auth_request.body);
                	token = res.access_token;
                	log.debug(token);
                }
                api = http.request({
                    "url": "https://apis.goflipr.com/modules/" + this.serial + "/survey/last",
                    "params": {},
                    "headers": {"Authorization": "Bearer " + token},
                    "method": "GET" // the method is optional, it defaults to GET.
                });
                storage.local.apiStatus = api.status;
                storage.local.jsonTime = ts;
                if (api.status != 200) {
                    this.renderApiError(api.status);
                } else {
                    res = JSON.parse(api.body);
                    log.debug(res);
                    res.TIME = ts;
                    storage.local.jsonResults = res;
                    return res;
                }
            }

        } else {
           msg = "missing Flipr Serial Number";
           this.addFrame(msg);
           this.logger.error(msg);
           this.outputJSON();
        }
    };
    this.outputJSON = function(){
        response.addHeaders(configuration.crossDomainHeaders);
        response.write(JSON.stringify({"frames": this.frames, "raw": storage.local.jsonResults || '', "fromCache": this.isCached}));
        response.close(); 
    }
};

var lm = new laMetric(request.parameters.serial, request.parameters.username, request.parameters.password);
var result = lm.parseAPI();
if (result) {
   var ph, chlore;
   log.debug(result);
   lm.addFrame(result.Temperature.toFixed(0) + "Â°");
   ph = result.PH.Value;
   if(result.PH.Message !== "Bon" && result.PH.Message !== "Parfait"){
       if(result.PH.Deviation > 0){
           lm.addFrame(ph.toFixed(1) + " HI", "i10775");
       } else {
           lm.addFrame(ph.toFixed(1) + " LOW", "i10775");  
       }
   } else {
       lm.addFrame(ph.toFixed(1), "i10767");
   }
   chlore = result.Desinfectant.Deviation;
   if(result.Desinfectant.Message !== "Parfait" && result.Desinfectant.Message !== "Bon"){
       if(chlore > 0){
           lm.addFrame(chlore.toFixed(1) + " HI", "i10776");
       } else {
           lm.addFrame(chlore.toFixed(1) + " LOW", "i10776");
       }
   } else {
       lm.addFrame(result.Desinfectant.Message, "i10777");
   }
   lm.outputJSON(); 
}

